// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // load of A : d1
    // load of D : d2
    // inc  of PC : !pcload
    // load of PC : Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3..7]=false, out=pcload)
    // sel of Mux : a
    /*
    Add16(a=instruction, b=false, out=trash, out[12]=sela);
    */
    Add16(a=instruction, b=false, out=trash, out[12]=sela, out[11]=aluzx, out[10]=alunx, out[9]=aluzy, out[8]=aluny, out[7]=aluf, out[6]=aluno, out[5]=loadd1, out[4]=loadd2, out[3]=writeM, out[2]=j1, out[1]=j2, out[0]=j3);
    
    Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3..7]=false, out=pcload);
    Not(in=pcload, out=pcinc);
    Mux16(a=instruction, b=aluout, sel=sela, out=ain);
    Register(in=ain, load=loadd1, out=aout, out[0..14]=addressM); // A
    Register(in=aluout, load=loadd2, out=dout); // D
    Mux16(a=aout, b=inM, sel=sela, out=aluin);
    PC(in=aout, load=pcload, inc=pcinc, reset=reset, out=pctrash, out[0..14]=pc);
    ALU(x=dout, y=aluin, zx=aluzx, nx=alunx, zy=aluzy, ny=aluny, f=aluf, no=aluno, out=outM, out=aluout, zr=aluzr, ng=alung);
    
}